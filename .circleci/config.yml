# CircleCIのバージョン
version: 2.1
# ジョブの定義（ひとつから複数個） CircleCIのジョブとは、最小単位の処理(ステップ)の集合体
jobs:
    build:

        # CircleCIの処理はDockerコンテナ上で処理される
        docker:
            # 使用するDockerイメージを指定する（以下はCircleCIが用意しているPHPとnode.jsのDockerイメージを使用する）
            - image: circleci/php:7.3-node-browsers

        # stepsには一つ以上の処理を定義する
        steps:
        # runには一つの処理の内容を定義する（ここではshellスクリプトのコマンドechoを使用してHelloを表示する処理を実行）
        # - run: echo "Hello World"

        # CircleCIでテストを実行するため以下を追記

        # checkoutはGitHubからCircleCIの環境にソースコードをコピー（git clone）してくる
        - checkout

        # - restore_cache:
            # keys:
            # "composer.lock" can be used if it is committed to the repo
            # - v1-dependencies-{{ checksum "backend/composer.json" }}

        # CircleCIで実施するテストはひつようなパッケージを毎回インストールしなければならない
        - run: sudo composer self-update --1

        # キャッシュの設定  restore_cache 保存したキャッシュの復元を行う keyには復元するキャッシュの名前を指定する キャッシュがあれば復元しなければ何も行われない
        - restore_cache:
            key: composer-v1-{{ checksum "composer.lock" }}

        # 前述のキャッシュが存在する場合、Nothing to install or update と表示され、以下の処理はされずに時間の短縮となる
        - run:
            working_directory: backend
            command: sudo composer install -n --prefer-dist

# キャッシュの処理ができてるか確認 TODO

        # キャッシュの保存  keyに指定した名前でキャッシュを保存する。保存するディレクトリ名・ファイル名をpathsに指定する。 またキャッシュの保存は一ヶ月のみ。キャッシュを保存しなおしたい場合は、v1,v2と名前を変えていく
        # キャッシュが保存された場合は Stored Cache to... と表示される
        # restore_cacheの段階でキャッシュが見つかった場合、Skipping cache generation, cache already exists.. と表示されsave_cacheのステップはスルーされる
        - save_cache:
            # キャッシュに指定する名前(key)は何でもOKだがわかりやすい名前をつけること  checksum ファイル名をハッシュ化した値を算出
            # composer.lockに変更があればrestore_cacheでキャッシュを復元せずに、save_cacheで新しいkeyにてキャッシュを保存し直す
            key: composer-v1-{{ checksum "composer.lock" }}
            paths:
                - vendor

        # js各種パッケージのインストール（ローカル開発環境を構築したときと同様にjsのトランスパイルを行う）
        - run:
            working_directory: backend
            command: npm ci

        # jsのトランスパイル   runのマニュアル  https://circleci.com/docs/ja/2.0/configuration-reference/#run
        - run:
            working_directory: backend
            command: npm run dev
        # テストの実行ステップの追加  （ArticleTest.phpをコマンドでテストしたときと同様のテストを行う）
        - run:
            name: php test
            working_directory: backend
            command: vendor/bin/phpunit